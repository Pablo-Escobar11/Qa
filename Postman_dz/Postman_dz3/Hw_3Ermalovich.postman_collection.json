{
	"info": {
		"_postman_id": "02cda171-6bee-4651-805d-4ae40b152181",
		"name": "Hw_3Ermalovich",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_J = pm.response.json();\r",
							"pm.environment.set(\"token\", resp_J.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "pasha",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url3}}login",
					"host": [
						"{{url3}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let resp_J =pm.response.json();\r",
							"let req_J = request.data;\r",
							"\r",
							"let koef_6 = resp_J.qa_salary_after_6_months/resp_J.start_qa_salary;\r",
							"pm.test(\"check koef for 6 month\", function () {\r",
							"    pm.expect(resp_J.start_qa_salary * koef_6).to.eql(resp_J.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"let koef_12 = resp_J.qa_salary_after_12_months/resp_J.start_qa_salary;\r",
							"pm.test(\"check koef for 12 month\", function () {\r",
							"    pm.expect(resp_J.start_qa_salary * koef_12).to.eql(resp_J.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"let koef_1_5 = resp_J.person.u_salary_1_5_year/resp_J.start_qa_salary;\r",
							"pm.test(\"check koef for 1.5 year\", function () {\r",
							"    pm.expect(resp_J.start_qa_salary * koef_1_5).to.eql(resp_J.person.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							"const schema = \r",
							"{ \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Json responce check\", () =>{\r",
							"    let result = tv4.validateMultiple(resp_J, schema);\r",
							"    console.log(result);\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.environment.set(\"u_salary_1_5_year\", resp_J.person.u_salary_1_5_year);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : 21,\r\n    \"salary\" : 300,\r\n    \"name\" : \"Pasha\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url3}}user_info",
					"host": [
						"{{url3}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp_J =pm.response.json();\r",
							"let req_J = request.data;\r",
							"\r",
							"const scheme = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : {\r",
							"      \"age\" : {\"type\" : \"integer\"},\r",
							"      \"name\" : {\"type\" : \"string\"},\r",
							"      \"salary\" : {\r",
							"          \"type\" : \"array\",\r",
							"          \"items\" : [\r",
							"              {\"type\" : \"integer\"},\r",
							"              {\"type\" : \"string\"},\r",
							"              {\"type\" : \"string\"}\r",
							"          ]\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"      ]\r",
							"    }\r",
							"}\r",
							"pm.test(\"scheme is valid\", function () {\r",
							"    let isValid = tv4.validate(resp_J, scheme, true, true);\r",
							"    pm.expect(isValid).to.be.true\r",
							"});\r",
							"\r",
							"let koef1 = +(resp_J.salary[1])/resp_J.salary[0];\r",
							"pm.test(\"check second salary\", function () {\r",
							"    pm.expect(resp_J.salary[0] * koef1).to.eql(+resp_J.salary[1]);\r",
							"});\r",
							"\r",
							"let koef2 = +(resp_J.salary[2])/resp_J.salary[0];\r",
							"pm.test(\"check thrid salary\", function () {\r",
							"    pm.expect(resp_J.salary[0] * koef2).to.eql(+resp_J.salary[2]);\r",
							"});\r",
							"\r",
							"if (+resp_J.salary[2] > resp_J.salary[0]){\r",
							"    console.log(\"the third element is bigger than the first\");\r",
							"}\r",
							"else{console.log(\"The first bigger\");}\r",
							"\r",
							"if (+resp_J.salary[2] > +resp_J.salary[1]){\r",
							"    console.log(\"the third element is bigger than the second\");\r",
							"}\r",
							"else{console.log(\"The second is bigger\");}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "21",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "300",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pasha",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url3}}new_data",
					"host": [
						"{{url3}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp_J = pm.response.json();\r",
							"let req_J = request.data;\r",
							"\r",
							"const scheme = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : {\r",
							"        \"age\" : {\"type\" : \"integer\"},\r",
							"        \"daily_food\" : {\"type\" : \"number\"},\r",
							"        \"daily_sleep\" : {\"type\" : \"number\"},\r",
							"        \"name\" : {\"type\" : \"string\"}\r",
							"     },\r",
							"     \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"      ] \r",
							"}\r",
							"pm.test(\"scheme is valid\", function () {\r",
							"    let isValid = tv4.validate(resp_J, scheme, true, true);\r",
							"    pm.expect(isValid).to.be.true\r",
							"});\r",
							"\r",
							"koef1 = resp_J.daily_food/+req_J.weight\r",
							"pm.test(\"check first koef\", function () {\r",
							"    pm.expect(+req_J.weight * koef1).to.eql(+resp_J.daily_food);\r",
							"})\r",
							"\r",
							"koef2 = resp_J.daily_sleep/+req_J.weight\r",
							"pm.test(\"check second koef\", function () {\r",
							"    pm.expect(+req_J.weight * koef2).to.eql(+resp_J.daily_sleep);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "21",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "78",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pasha",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url3}}test_pet_info",
					"host": [
						"{{url3}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp_J = pm.response.json();\r",
							"let req_J = request.data;\r",
							"\r",
							"const scheme = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": { \"type\": \"string\"},\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"integer\"}\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"integer\"}\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\"type\": \"integer\"}\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"scheme is valid\", function () {\r",
							"    let isValid = tv4.validate(resp_J, scheme, true, true);\r",
							"    pm.expect(isValid).to.be.true\r",
							"});\r",
							"\r",
							"pm.test(\"check age\", function(){\r",
							"    pm.expect(resp_J.age).to.eql(req_J.age)\r",
							" }); \r",
							" \r",
							" pm.test(\"check name\", function(){\r",
							"    pm.expect(resp_J.name).to.eql(pm.environment.get(\"name\"));\r",
							" });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "21",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url3}}get_test_user",
					"host": [
						"{{url3}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_J = pm.response.json();\r",
							"let req_J = request.data;\r",
							"\r",
							"\r",
							"let curr_id = resp_J[Math.floor(Math.random()*resp_J.length)];\r",
							"console.log(curr_id.Cur_ID);\r",
							"pm.environment.set(\"curr_id\", curr_id.Cur_ID)\r",
							"   "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url3}}currency",
					"host": [
						"{{url3}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_J = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const scheme = {\r",
							"    \"type\" : \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
							"    \"Cur_ID\": {\"type\": \"integer\"},\r",
							"    \"Cur_Name\": {\"type\": \"string\"},\r",
							"    \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
							"    \"Cur_Scale\": {\"type\": \"integer\"},\r",
							"    \"Date\": {\"type\": \"string\"}\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"scheme is valid\", function () {\r",
							"    let isValid = tv4.validate(resp_J, scheme, true, true);\r",
							"    pm.expect(isValid).to.be.true\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url3}}curr_byn",
					"host": [
						"{{url3}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}